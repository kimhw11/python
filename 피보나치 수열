피보나치 보고서
--------------------------------------------------------------
수열 개념
피보나치 개념
> 코드 작성 이유

코드 예시
- 일반함수 구현 방식
- 재귀함수 구현 방식
> 재귀 방식은 n값 즉 원하는 값의 크기가 커질수록 값을 얻기까지 
  시간이 오래 걸림, 하지만 이를 해결할 방법이 있다
- 메모이제이션 구현 방식 (DP)
- 람다 방식1,2

시각화..까지? (matplotlib)

마무리

--------------------------------------------------------------
https://richwind.co.kr/3
--------------------------------------------------------------

import time
#
#일반함수 방식
def fibo(n): #fib라는 이름의 함수 선언 , n = 구하려는 항(변수)
    # 첫항과 둘째항을 나타낼 변수 지정
    a, b = 1, 1
    # 만약 n값이 1이나 2가 아니라면
    if n == 1 or n == 2:
        #1출력
        return 1
    #위 조건에 해당하지 않는다면 1부터 n-1까지의 범위의 반복문을 만들어
    #n번째 수를 찾는다
    for i in range(1, n):
        a, b = b, a + b
    return a

#재귀함수 방식
def fib(n): #fib라는 이름의 함수 선언 , n = 구하려는 항(변수)
    # 만약 n값이 1보다 작거나 같다면 n값 출력
    if n <= 1: return
    # 아니라면 fib함수의 n값에 n-1과 n-2를 각각 넣고 함수 재실행
    else: return fib(n-1) + fib(n-2)

start = time.time()
result = fib(int(input("구하려는 n번째 항을 입력하시오: ")))
print(f"실행 시간: {round(time.time() - start)}, 결과값: {result}")

#메모이제이션 방식
def memoization_fib(n):
    #구하려는 값까지 도달하기 위해 값을 저장해둘 공간
    arr = [0,1] + [0] * (n-1)
    #반복문으로 n번째 값까지의 값을 하나하나 저장
    for i in range(2,n+1):
        arr[i] = arr[i-1] + arr[i-2]
    #n번째 값 출력
    return arr[n]

start = time.time()
result2 = memoization_fib(int(input("구하려는 n번째 항을 입력하시오: ")))
print(f"실행 시간: {round(time.time() - start)}, 결과값: {result2}")

#------------------------------------------------------------
# import matplotlib.pyplot as plt
# n = int(input())
# fib = [0,1] + [0] * (n-1)
# for i in range(2,n+1):
#     fib[i] = fib[i-1] + fib[i-2]
# li2 = range(0,n+1)
# data_dict = {'y': fib, 'x':li2}
# plt.plot('x','y',data=data_dict)
# plt.show()
