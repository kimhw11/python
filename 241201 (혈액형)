main.py

class Human:
    def __init__(self,bt_fm,sons_bt):
        self.bt_fm = bt_fm
        self.sons_bt = sons_bt

    def parents_bt(self,bt_fm):
        for i in range(len(list(bt_fm.keys()))):
            par_blood = []
            if len(bt_fm[list(bt_fm.keys())[i]]) == 1:
                if bt_fm[list(bt_fm.keys())[i]] * 2 not in par_blood:
                    par_blood.append(bt_fm[list(bt_fm.keys())[i]] * 2)
                if bt_fm[list(bt_fm.keys())[i]] + 'O' not in par_blood:
                    par_blood.append(bt_fm[list(bt_fm.keys())[i]] + 'O')
            else:
                par_blood.append(bt_fm[list(bt_fm.keys())[i]])
            bt_fm[list(bt_fm.keys())[i]] = par_blood

        return bt_fm # 부모가 A형, B형일 때 > {'Father': ['AA', 'AO'], 'Mother': ['BB', 'BO']}

    # 자녀에게서 나올 수 있는 유전자형 구하기
    def sons_bt(self,parents_bt):
        sons_blood = []







bt_fm = {'Father':input(), 'Mother':input()} #{'Father': 'A', 'Mother': 'B'}
# parents_bt = Human(bt_fm).parents_bt()

parents_bt = Human.parents_bt(Human,bt_fm)
sons_bt = Human.sons_bt(Human,parents_bt)

print(parents_bt)
print(sons_bt)

# 아버지 혈액형 입력, 어머니 혈액형 입력받기 ( A or B or AB or O)
# 자녀에게서 나올 수 있는 ABO식 혈액형 유전자형의 종류

--------------------------------------------------------------------

test

from itertools import combinations

l = [1,2,3]

a =
print(a)
