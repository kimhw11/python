1. 변수 선언과 숫자형 자료형(정수, 실수)
변수 > 식에 따라 변하는 값(데이터가 담기는 공간)

정수 > 숫자 또는 문자열을 정수로 바꿔서 리턴
실수 >                "           실수로 바꿔서 리턴
정수 연산 ex) a = 1 , b =3 / a+b = 4
> 값이 주어지지 않으면 0 리턴

2. 문자열 자료형(String) + 리스트(List)
문자열(string) > 문자나 단어 - ' 이나 " 로 분류되있음
문자열 연산 > ex) a = "computer" , b = "engineering" / a+b = "computer engineering"
문자열 관련 함수 >
문자열은 iterable(반복가능)함
1) replace() > 기존 문자를 새로운 문자로 치환
2) split()  > ()안의 문자를 기준으로 나누어준다
3) strip() > 연속되는 ()안의 문자를 제거해준다
4) find vs index > find함수에서 없는 문자를 찾으면 -1 반환, but index 함수에서 없는값을 찾으면 오류발생
. . . . 

리스트(list) > 문자나 숫자 혹은 리스트 안에 리스트등 여러 값이 한번에 들어있는 자료형 > [ ]
문자열과 마찬가지로 iterable하기 때문에 변할수있음(더하기나 곱하기 연산 가능)
리스트 슬라이싱(인덱스는 0부터 시작)
ex) li = ['a','b','c'] / print(li[0:2]) > ['a', 'b'] / print(li[::-1]) > ['c', 'b', 'a']
리스트 인덱싱 
ex) li = ['a','b','c'] / print(li[0]) > a / print(li[-1]) > c 
리스트 관련 함수
1) append ( ) > 리스트에 마지막 인덱스에 괄호 안의 값 추가
2) sort( ) > 리스트 안의 값들을 오름차순 or 내림차순으로 정렬
3) remove( ) > 리스트 안에서 괄호 안의 값들을 제거
4) pop( ) > 괄호안의 값을 제거후 반환
5) index( ) > 괄호안의 값이 가장먼저 나오는 인덱스 값 반환
. . . . 

3. 튜플, 딕셔너리, 집합
튜플(tuple) > ( )로 묶어서 구분
튜플은 리스트와 달리 값 추가,수정,삭제가 어려움
튜플끼리의 연산(더하기 곱하기,인덱싱,슬라이싱 등)은 가능

딕셔너리(dictionary)
key값과 value값을 보유한 자료형
print(dict[ket값]) > ket값의 value값 출력
* key값을 중복해서 사용하면 마지막 key값의 value값 출력
딕셔너리 관련 함수
1) dict.(key,value,items())
2) pop

집합(set) > 중복을 허용하지 않는 자료형, set( )을 이용해 집합 생성
집합의 연산 < 합집합 | , 차집합 - , 교집합 &
등호와 같이쓰면 연산과 대입을 동시에

4. 불 자료형, 분기문
불(bool) > True or False로 구성
True와 False를 사용할때는 첫글자는 대문자
자료형의 값이 존재하면 True 존재하지 않으면 False

조건문 
if, elif, else문
연산자 > 비교연산자 - >,<,= / and, or, not
while문 > 조건을 만족하는 동안 반복을 실행 / break > 반복문 탈출 / continue > 실행문 스킵후 다음 반복
for문 > 정해진 횟수만큼 반복 실행

5. 함수
함수(Function) > input > output
함수를 사용하는 이유? > 긴 코드를 짧고 쉽게 사용하기 위함 , 입력값에 따라 출력값을 다르게 하기 위함
입력값이 없어도 함수 실행 가능 but 출력값 X
return문이 없으면 입력값이 있어도 반환 X
지역변수 전역변수
lamda함수 > def를 사용하지 않고 사용하는 함수 > 일회성임


