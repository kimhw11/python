from collections import deque
import sys

input = sys.stdin.readline

N = input().rstrip() # 초기 문자열

M = int(input()) # 입력할 명령어의 개수

# 커서 기준으로 각각 왼쪽과 오른쪽의 문자들을 담을 덱 생성
# 덱 생성 이유 > 각 배열의 첫번째,마지막 원소의 추가,삭제를 효율적으로 하기 위함
# 왼쪽 덱에 초기 문자열 저장, 초기 커서 위치 > 왼쪽 덱의 오른쪽
L_deque, R_deque = deque([x for x in N]),deque()

for _ in range(M):
    edit = input().rstrip().split()
    # 명령어가 L일때 > 커서 왼쪽으로 한칸 = 왼쪽 리스트의 맨 마지막 원소를
    # 오른쪽 리스트의 맨 앞에 추가
    if edit[0] == 'L' and L_deque:
        R_deque.appendleft(L_deque.pop())

    # 명령어가 D일때 > 커서 오른쪽으로 한칸 = 오른쪽 리스트의 맨 처음 원소를
    # 왼쪽 리스트의 맨 뒤에 추가
    elif edit[0] == 'D' and R_deque:
        L_deque.append(R_deque.popleft())

    # 명령어가 B일때 > 커서 왼쪽 값 삭제 > 왼쪽 리스트의 맨 마지막 값 삭제
    elif edit[0] == 'B' and L_deque:
        L_deque.pop()

    # 명령어가 P $ 일때  > 커서 왼쪽에 $ 값 추가 > 위에서 명령어를 입력 받을때
    # split함수로 P와 $를 나누어 놓았으므로 왼쪽 리스트에 edit[1] 번째 값 추가
    elif edit[0] == 'P':
        L_deque.append(edit[1])

# 왼쪽 리스트와 오른쪽 리스트를 각각 join함수를 통해 문자열로 합친 후 더해서 출력
print(''.join(L_deque) + ''.join(R_deque))
